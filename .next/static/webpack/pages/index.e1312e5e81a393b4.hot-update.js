"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/core/ListaSimplesmenteEncadeada.ts":
/*!************************************************!*\
  !*** ./src/core/ListaSimplesmenteEncadeada.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListaSimplesmenteEncadeada\": function() { return /* binding */ ListaSimplesmenteEncadeada; }\n/* harmony export */ });\nclass ListaSimplesmenteEncadeada {\n    addInList(num, pos) {\n        const number = parseInt(String(num));\n        const position = parseInt(String(pos)) - 1;\n        // Verifica se a posição é válida\n        if (position >= 0 && position <= this.length) {\n            // Verifica se o número já existe na lista\n            if (!this.searchInList(number)) {\n                const newNode = {\n                    value: number,\n                    next: null\n                };\n                if (position === 0) {\n                    // Insere no começo da lista\n                    newNode.next = this.head;\n                    this.head = newNode;\n                    if (!this.tail) {\n                        this.tail = newNode;\n                    }\n                } else if (position === this.length) {\n                    // Insere no final da lista\n                    this.tail.next = newNode;\n                    this.tail = newNode;\n                } else {\n                    // Insere no meio da lista\n                    let current = this.head;\n                    for(let i = 0; i < position - 1; i++){\n                        current = current.next;\n                    }\n                    newNode.next = current.next;\n                    current.next = newNode;\n                }\n                this.listNumbers.splice(pos, 0, number); // add the new number to the listNumbers array\n                this.length++;\n            } else {\n                console.log(\"O n\\xfamero \".concat(number, \" j\\xe1 existe na lista.\"));\n            }\n        } else {\n            console.log(\"Posi\\xe7\\xe3o inv\\xe1lida.\");\n        }\n    }\n    removeInList(num, pos) {\n        if (pos !== undefined && num !== undefined) {\n            console.log(\"Informe apenas a posi\\xe7\\xe3o ou o n\\xfamero a ser removido.\");\n            return;\n        }\n        if (pos !== undefined) {\n            const index = parseInt(String(pos)) - 1;\n            if (index >= 0 && index < this.length) {\n                if (index === 0) {\n                    // Remove do começo da lista\n                    this.head = this.head.next;\n                    if (this.length === 1) {\n                        this.tail = null;\n                    }\n                } else if (index === this.length - 1) {\n                    // Remove do final da lista\n                    let current = this.head;\n                    while(current.next !== this.tail){\n                        current = current.next;\n                    }\n                    current.next = null;\n                    this.tail = current;\n                } else {\n                    // Remove do meio da lista\n                    let current = this.head;\n                    for(let i = 0; i < index - 1; i++){\n                        current = current.next;\n                    }\n                    current.next = current.next.next;\n                }\n                this.length--;\n            } else {\n                console.log(\"Posi\\xe7\\xe3o inv\\xe1lida.\");\n            }\n        } else if (num !== undefined) {\n            const number = parseInt(String(num));\n            let current = this.head;\n            let previous = null;\n            while(current){\n                if (current.value === number) {\n                    if (!previous) {\n                        // Remove do começo da lista\n                        this.head = current.next;\n                        if (this.length === 1) {\n                            this.tail = null;\n                        }\n                    } else if (current.next === null) {\n                        // Remove do final da lista\n                        previous.next = null;\n                        this.tail = previous;\n                    } else {\n                        // Remove do meio da lista\n                        previous.next = current.next;\n                    }\n                    this.length--;\n                    return;\n                }\n                previous = current;\n                current = current.next;\n            }\n            console.log(\"O n\\xfamero \".concat(number, \" n\\xe3o existe na lista.\"));\n        } else {\n            console.log(\"Informe a posi\\xe7\\xe3o ou o n\\xfamero a ser removido.\");\n        }\n    }\n    searchInList(num, pos) {\n        if (pos !== undefined && num !== undefined) {\n            console.log(\"Informe apenas a posi\\xe7\\xe3o ou o n\\xfamero a ser buscado.\");\n            return null;\n        }\n        if (pos !== undefined) {\n            const index = parseInt(String(pos)) - 1;\n            if (index >= 0 && index < this.length) {\n                let current = this.head;\n                for(let i = 0; i < index; i++){\n                    current = current.next;\n                }\n                console.log(\"O n\\xfamero na posi\\xe7\\xe3o \".concat(pos, \" \\xe9 \").concat(current.value, \".\"));\n                return current.value;\n            } else {\n                console.log(\"Posi\\xe7\\xe3o inv\\xe1lida.\");\n                return null;\n            }\n        } else if (num !== undefined) {\n            const number = parseInt(String(num));\n            let current = this.head;\n            let index = 0;\n            while(current){\n                if (current.value === number) {\n                    console.log(\"O n\\xfamero \".concat(number, \" est\\xe1 na posi\\xe7\\xe3o \").concat(index + 1, \".\"));\n                    return index + 1;\n                }\n                current = current.next;\n                index++;\n            }\n            console.log(\"O n\\xfamero \".concat(number, \" n\\xe3o est\\xe1 na lista.\"));\n            return null;\n        } else {\n            console.log(\"Informe a posi\\xe7\\xe3o ou o n\\xfamero a ser buscado.\");\n            return null;\n        }\n    }\n    constructor(max, listNumbers){\n        this.max = max;\n        this.listNumbers = listNumbers;\n        this.size = 0;\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n        for(let i = 0; i < listNumbers.length; i++){\n            if (this.size < this.max) {\n                this.addInList(listNumbers[i], this.size);\n            } else {\n                console.log(\"A lista j\\xe1 est\\xe1 cheia. O n\\xfamero \".concat(listNumbers[i], \" n\\xe3o foi adicionado.\"));\n            }\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/core/ListaSimplesmenteEncadeada.ts\n"));

/***/ })

});